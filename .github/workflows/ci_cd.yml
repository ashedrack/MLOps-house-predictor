name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: '**/requirements.txt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort

    - name: Check code formatting with Black
      run: |
        black --check .

    - name: Check imports with isort
      run: |
        isort --check-only --diff .

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with pytest and coverage
      run: |
        pytest tests/ --cov=src/ --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  model-evaluation:
    needs: test-and-lint
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Initialize MLflow
      run: |
        mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root ./artifacts &

    - name: Train and evaluate model
      run: |
        python run_pipeline.py
      env:
        MLFLOW_TRACKING_URI: sqlite:///mlflow.db

    - name: Archive model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: artifacts/

  test-streamlit:
    needs: model-evaluation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: artifacts/

    - name: Test Streamlit app startup
      run: |
        # Test if Streamlit app starts without errors
        timeout 30s streamlit run app.py || code=$?
        if [ $code -eq 124 ]; then
          echo "Streamlit app started successfully"
          exit 0
        else
          echo "Streamlit app failed to start"
          exit 1
        fi

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Security scan with Bandit
      run: |
        pip install bandit
        bandit -r . -ll -ii -x tests/

    - name: Check for dependency vulnerabilities
      run: |
        pip install safety
        safety scan
